RDF Authoring Environments for End Users
 Abstract The Semantic Web enables powerful agent-facilitated negotiation and retrieval functionality by enabling the transfer of machine-readable metadata across the Internet.  This next generation Web presupposes the mass availability of metadata such as clothing measurements, busy/free time calendar indications, and dietary restrictions, meaning that users will need to provide more information to their systems to reap the aforementioned benefits.  Current tools for capturing ontology-encoded metadata from users are ill-suited for this task, requiring knowledge of ontologies or the ability to navigate generalized abstract directed graphs.  In this paper we present user interface paradigms based on the idea that an object can be represented on the screen by an extensible family of views.  We present several strategies for allowing users to create RDF metadata by manipulating views, including a drag and drop form-based property editor and a viewbased graph editor.  Users benefit from being able to interact with objects by means of views suited to the context at hand, such as photograph representations or human-readable summary descriptions, rather than text fields with plaintext strings or URIs.  Finally, we discuss a strategy for enabling advanced users to construct ontologies and customized views and to distribute them to users unfamiliar with modeling knowledge, ultimately giving end users intuitive interfaces for entering metadata.  Motivation The Semantic Web provides a foundation upon which machines will be able to perform sophisticated coordination activities automatically, such as scheduling appointments, finding products that match specific criteria, and sharing ratings and opinions of goods and services over the Internet [3].  These activities require that specific pieces of knowledge, ranging from people's calendars to product specifications, be made available in machine-readable form.  The Resource Description Framework (RDF) was designed specifically as a standard means of encoding such information for the Semantic Web [2].  As the amount of information recorded in RDF grows, the activities described above will start to become possible.  Technologies for exposing database information as XML or RDF have been developed and allow existing systems to participate in the growth of the Semantic Web.  However, an important bottleneck to the proliferation of RDF as a platform for conducting everyday activities, such as coordinating schedules and sharing opinions, is the dearth of tools designed to allow end users to express information in RDF.  Today's RDF authoring tools generally come in four flavors: (1) ontology editors such as Protg[6], OilEd [9] and Onto-mat [4]; (2) graph-based representation viewers such as IsaViz [5]; (3) schema-specific user interfaces (the type automatically generated by database applications such as Microsoft Access and FileMaker) including Reggie [10] and Ont-o-mat; and (4) taxonomy editors exposed by tools such as Protgand used by services such as the Open Directory Project [11].  However, existing tool implementations have for the most part focused on maintaining ontological constraints and not on addressing the HCI issues of information collection.  At the same time, a lot of the information that needs to eventually be provided in RDF is already being collected relatively successfully by current software.  In fact, end user software employs many of the same approaches to information collection as those used by RDF authoring tools but is "streamlined" enough to be intuitive to non-technical people.  For example, users know how to drag and drop contacts into the "To" field of an e-mail editor to fill in a message header form (header forms can be presented by many ontology editors).  A simple row of radio buttons allows Web sites that sell books to collect rating information from customers.  Diagramming software such as Microsoft Visio allows users to draw organization charts and relationship diagrams.  Although not often considered as such, the kinds of information collected by the above user interface paradigms are also the kinds of information one wants to record in RDF for machine consumption.  Of course the interfaces associated with these examples are built from ontological constraints, such as the set of possible ratings for a book or the presence of a "To" property in an e-mail message header.  Some users will understand how to put together basic schemas given the right tools, and the system should allow these users to conveniently share their schemas with others in the same community spirit as the current Web.  Users can easily become familiar with incorporating Web content such as clip art, news articles, or tables into their documents and e-mails because of the ease with which Web browsers and word processors (through copy and paste or drag and drop) allow users to take advantage of publicly-posted information.  Semantic Web client-side software must be able to allow users to take advantage of schemas posted on the Web just as easily.  Approach In this paper we present user interface paradigms for allowing users to record many different forms of metadata, i. e. , create and manage properties of resources (the Semantic Web term for object) and relationships between resources.  The basic principle behind this paradigm is the idea of views---user interface components that serve as proxies for resources on the screen.  Several views may be associated with any one resource; for example, a person may be displayed as an icon (an icon view) or as a large key-value pair listing as is the case in an address book (a property listing view).  New views may be introduced into the system, allowing limitless freedom and flexibility in terms of how an object may be presented in a manner most suitable to the current context.  Exposing resources as views enables a number of advantages.  One benefit is that users are made able to work with their information by direct manipulation, an HCI concept that has found to be successful in past research [7].  For example, users can drag and drop a view into a list as a means of indicating to the system that the resource represented by the view should be added to that list.  Another advantage is that the problem of exposing a user interface by which users can manipulate the properties of a resource can then be cast as a problem of designing appropriate views for that resource, meaning that one does not need to rely on a handful of views to handle all possible kinds and types of resources.  Instead, we have developed several fundamental paradigms that correspond to various modalities in which users can specify information.  These paradigms correspond to the four types of tools mentioned above.  The most basic of these is the property editor, which allows users both to specify metadata and to customize the ontology by filling in or rearranging a form (types 1 and 3).  We also describe paradigms for managing lists of resources and for placing resources into taxonomies (type 4).  Finally, we present a graph editing paradigm that allows users to specify the relationships between resources visually when appropriate (type 2).  While these approaches for metadata input have been explored previously, what distinguishes the work presented here is the fact that views that embody the paradigms given here usually embed views of other resources.
