Efficient Multi-Object Dynamic Query Histograms
 Abstract Dynamic Queries offer continuous feedback during range queries, and have been shown to be effective and satisfying.  Recent work has extended them to datasets of 100,000 objects and, separately, to queries involving relations among multiple objects.  The latter work enables filtering houses by properties of their owners, for instance.  Our primary concern is providing feedback from histograms during Dynamic Query.  The height of each histogram bar shows the count of selected objects whose attribute value falls into a given range.  Unfortunately, previous efficient algorithms for single object queries overcount in the case of multiple objects if, for instance, a house has multiple owners.  This paper presents an efficient algorithm that with high probability closely approximates the true counts.  1.  Previous Dynamic Query work 1. 1.  Single Object Interface Figure 1 shows a Dynamic Query (DQ) interface as implemented in VQE, a Visual Query Environment for exploring data from a database [1].  VQE is built on top of Visage [2], an interactive data visualization system developed by Carnegie Mellon and Maya Design Group.  The subset of the database being explored at any given time by a VQE query is called the active subset.  The top row in the upper box of Figure 1 indicates that the query is being applied to an active subset of 195 people, and that 72 of these people satisfy the constraints imposed by the sliders on the remaining two rows.  Namely, they have a birthdate between 8/1935 and 8/1968 and a salary between $15,760 and $66,729.  The rectangular sliders are superimposed on histograms where the dark bars show the distribution of the attribute values for the 72 selected people.  The dark bars partially cover the light bars, which show the distribution for all 195 people.  When the user drags either end of the sliders to change a query's selection range, the counts, histograms, and visibility of the points in the chart are updated in real time.  In Figure 1, the attributes shown on the axes in the chart are the same ones being filtered, so data only appears in a small rectangular area.  1. 2.  Efficient Algorithms We will only describe algorithms for updating the histograms.  The counts in the top row of the upper box in Figure 1 can be implemented as a zero dimensional histogram.  The chart can be implemented as a 2D histogram where the pixel at xy is turned on if the count for that histogram bucket is greater than zero.  For the following algorithms let a number of sliders p slider width in pixels r number of objects in active subset The sliders' edges can be positioned at any of the p pixel positions.  Even though the histogram bars as displayed are several pixels wide, the histograms are computed with p buckets internally.  Several of these buckets are then added when computing the bar heights for display.  Figure 1 Restrictions on salary and birthdate have filtered the active subset of 195 people down to 72 visible in the chart.
