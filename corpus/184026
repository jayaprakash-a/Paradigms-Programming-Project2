Evolution using genetic programming of a low-distortion, 96 decibel operational amplifier
 KEYWORDS Genetic programming, Automated circuit design, Analog circuit synthesis, operational amplifier ABSTRACT There is no known general technique for automatically designing an analog electrical circuit that satisfies design specifications.  Genetic programming was used to evolve both the topology and the sizing (numerical values) for each component of a low-distortion 96 decibel (64,860 -to-1) amplifier circuit.  1.  THE ANALOG DILEMMA The field of engineering design offers a practical yardstick for evaluating automated techniques because the design process is usually viewed as requiring human intelligence and because design is a major activity of practicing engineers.  In the design process, the design requirements specify "what needs to be done. " A satisfactory design tells us "how to do it. " In the field of electrical engineering, the design process typically involves the creation of an electrical circuit that satisfies user-specified design goals.  Considerable progress has been made in automating the design of certain categories of purely digital circuits; however, the design of analog circuits and mixed analog-digital circuitshas not proved to be as amenable to automation (Rutenbar 1993).  In discussing "the analog dilemma," O.  Aaserud and I.  Ring Nielsen (1995) (not to be confused with Ivan Riis Nielsen cited later) observe, "Analog designers are few and far between.  In contrast to digital design, most of the analog circuits are still handcrafted by the experts or so-called 'zahs' of analog design.  The design process is characterized by a combination of experience and intuition and requires a thorough knowledge of the process characteristics and the detailed specifications of the actual product.  "Analog circuit design is known to be a knowledge-intensive, multiphase, iterative task, which usually stretches over a significant period of time and is performed by designers with a large portfolio of skills.  It is therefore considered by many to be a form of art rather than a science. " Of course, engineers employ human reasoning abilities and intelligence in designing complex structures.  In contrast, nature employs an entirely different approach to design.  In nature, complex structures are designed by means of evolution and natural selection.  This suggests the possibility of applying the techniques of evolutionary computation in order to automate the design of complex structures.  Genetic algorithms have been applied to the problem of circuit synthesis.  A CMOS operational amplifier (op amp) circuit was designed using a modified version of the genetic algorithm (Kruiskamp and Leenaerts 1995); however, the topology of each op amp was one of 24 pre-selected topologies based on the conventional human-designed stages of an op amp.  Thompson (1996) used a genetic algorithm to evolve a frequency discriminator on a Xilinx 6216 reconfigurable digital gate array operating in analog mode.  Holland (1975) described how an analog of the naturally-occurring evolutionary process can be applied to solving scientific and engineering problems using what is now called the genetic algorithm (GA).  Koza (1992) described an extension of Holland's genetic algorithm in which the population consists of computer programs.  See also Koza and Rice 1992.  Koza (1994a, 1994b) described a way to evolve multipart programs consisting of a main program and one or more reusable, parameterized, hierarchically-called subprograms (called automatically defined functions).  Architecture-altering operations provide a way to automatically determine the number of such subprograms, the number of arguments that each possesses, and the nature of the hierarchical references, if any, among such subprograms (Koza 1995).  Recent research papers on genetic programming can be found in Kinnear (1994), Angeline and Kinnear (1996), and Koza, Goldberg, Fogel, and Riolo (1996).  Gruau's cellular encoding (1996) is an innovative technique in which genetic programming is used to concurrently evolve the architecture, weights, thresholds, and biases of neurons in a neural network.  This paper demonstrates that a design for a lowdistortion 96 decibel (dB) op amp (including both the circuit topology and component sizing) can be evolved using genetic programming.  The problem-specific information that the user must supply in order to apply genetic programming to a particular new problem of analog circuit synthesis is minimal; it primarily consists of a fitness measure for the operating characteristics of the desired circuit.  The user must also specify certain additional basic information such as the number of inputs and outputs of the desired circuit, the set of parts that are to be available to the circuit (e. g. , transistors, resistors, and capacitors), and the repertoire of circuitconstructing functions (which generally does not vary from problem to problem).  Additional evidence of the ability of genetic programming to evolve the design for analog electrical circuits was presented by showing genetically evolved designs for other types of circuits, including a lowpass filter, an asymmetric bandpass filter, and a crossover (woofer and tweeter) filter.  2.  Circuit-Constructing Program Trees Genetic programming can be applied to circuits if a mapping is established between the kind of rooted, point-labeled trees with ordered branches found in genetic programming and the line-labeled cyclic graphs germane to circuits.  The principles of developmental biology suggest a way to map program trees into circuits.  The starting point of the growth process used herein is a very simple embryonic electrical circuit.  The embryonic circuit contains certain fixed parts appropriate to the problem at hand and certain wires that are capable of subsequent modification.  An electrical circuit is progressively developed by applying the functions in a circuitconstructing program tree to the modifiable wires of the embryonic circuit (and, later, to both the modifiable wires and other components of the successor circuits).  The functions in the circuit-constructing program trees are divided into four categories: (1) connection-modifying functions that modify the topology of the circuit, (2) component-creating functions that insert components into the circuit, (3) arithmetic-performing functions that appear in arithmetic-performing subtrees as argument(s) to the component-creating functions and that specify the numerical value of the component, and (4) automatically defined functions that appear in function-defining branches and potentially enable certain substructures to be reused.  Each branch of the program tree is created in accordance with a constrained syntactic structure.  Branches are composed from construction-continuing subtrees that continue the developmental process and arithmetic-performing subtrees that determine the numerical value of components.  Connection-modifying functions have one or more construction-continuing subtrees, but no arithmetic-performing subtrees.  Component-creating functions have one constructioncontinuing subtree and typically have one arithmeticperforming subtree.  This constrained syntactic structure is preserved by using structure-preserving crossover with point typing (Koza 1994a).  2. 1.  The Embryonic Circuit The developmental process for converting a program tree into an electrical circuit begins with an embryonic circuit.  Figure 1 Feedback embryo for an amplifier.  corrected 10-96 version of N:\fhb\tojohn\r708826e. doc Figure 1 shows a one-input, one-output embryonic circuit that serves as a test harness for evolving op amp circuits.  VSOURCE is the input signal.  VOUT is the output signal.  There is a fixed 100 Ohm load resistor RLOAD and a fixed 100 Ohm source resistor RSOURCE.  At the beginning of the developmental process, there is a writing head pointing to (highlighting) each of the three modifiable wires (Z0, Z1, and Z2).  All development occurs at wires or components to which a writing head points.  The three modifiable wires provide connectivity between the three distinct
