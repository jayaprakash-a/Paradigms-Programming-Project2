Generalized Inference with Multiple Semantic Role Labeling Systems
 Abstract We present an approach to semantic role labeling (SRL) that takes the output of multiple argument classifiers and combines them into a coherent predicateargument output by solving an optimization problem.  The optimization stage, which is solved via integer linear programming, takes into account both the recommendation of the classifiers and a set of problem specific constraints, and is thus used both to clean the classification results and to ensure structural integrity of the final role labeling.  We illustrate a significant improvement in overall SRL performance through this inference.  1 SRL System Architecture Our SRL system consists of four stages: pruning, argument identification, argument classification, and inference.  In particular, the goal of pruning and argument identification is to identify argument candidates for a given verb predicate.  The system only classifies the argument candidates into their types during the argument classification stage.  Linguistic and structural constraints are incorporated in the inference stage to resolve inconsistent global predictions.  The inference stage can take as its input the output of the argument classification of a single system or of multiple systems.  We explain the inference for multiple systems in Sec.  2.  1. 1 Pruning Only the constituents in the parse tree are considered as argument candidates.  In addition, our system exploits the heuristic introduced by (Xue and Palmer, 2004) to filter out very unlikely constituents.  The heuristic is a recursive process starting from the verb whose arguments are to be identified.  It first returns the siblings of the verb; then it moves to the parent of the verb, and collects the siblings again.  The process goes on until it reaches the root.  In addition, if a constituent is a PP(propositional phrase), its children are also collected.  Candidates consisting of only a single punctuation mark are not considered.  This heuristic works well with the correct parse trees.  However, one of the errors by automatic parsers is due to incorrect PPattachment leading to missing arguments.  To attempt to fix this, we consider as arguments the combination of any consecutive NPand PP, and the split of NPand PPinside the NPthat was chosen by the previous heuristics.  1. 2 Argument Identification The argument identification stage utilizes binary classification to identify whether a candidate is an argument or not.  We train and apply the binary classifiers on the constituents supplied by the pruning stage.  Most of the features used in our system are standard features, which include .  Predicate and POS tag of predicate indicate the lemma of the predicate and its POS tag.
