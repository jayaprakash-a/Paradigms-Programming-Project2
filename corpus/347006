Navigating through triangle meshes implemented as linear quadtrees
 Abstract Techniques are presented for navigating between adjacent triangles of greater or equal size in a hierarchical triangle mesh where the triangles are obtained by a recursive quadtree-like subdivision of the underlying space into four equilateral triangles.  These techniques are useful in a number of applications including finite element analysis, ray tracing, and the modeling of spherical data.  The operations are implemented in a manner analogous to that used in a quadtree representation of data on the two-dimensional plane where the underlying space is tessellated into a square mesh.  A new technique is described for labeling the triangles which is useful in implementing the quadtree triangle mesh as a linear quadtree (i. e. , a pointer-less quadtree); the navigation can then take place in this linear quadtree.  When the neighbors are of equal size, the algorithms take constant time.  The algorithms are very efficient, as they make use of just a few bit manipulation operations and can be implemented in hardware using just a few machine language instructions.  The use of these techniques when modeling spherical data by projecting in onto the faces of a regular solid whose faces are equilateral triangles which are represented as quadtree triangular meshes is discussed in detail.  The methods are applicable to the icosahedron, octahedron, and tetrahedron.  The difference lies in the way transitions are made between the faces of the polyhedron.  However, regardless of the type of polyhedron, the computational complexity of the methods is the same.
