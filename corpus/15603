An Efficient Compiler for Weighted Rewrite Rules
 Abstract Context-dependent rewrite rules are used in many areas of natural language and speech processing.  Work in computational phonology has demonstrated that, given certain conditions, such rewrite rules can be represented as finite-state transducers (FSTs).  We describe a new algorithm for compiling rewrite rules into FSTs.  We show the algorithm to be simpler and more efficient than existing algorithms.  Further, many of our applications demand the ability to compile weighted rules into weighted FSTs, transducers generalized by providing transitions with weights.  We have extended the algorithm to allow for this.  1.  Motivation Rewrite rules are used in many areas of natural language and speech processing, including syntax, morphology, and phonology 1 .  In interesting applications, the number of rules can be very large.  It is then crucial to give a representation of these rules that leads to efficient programs.  Finite-state transducers provide just such a compact representation (Mohri, 1994).  They are used in various areas of natural language and speech processing because their increased computational power enables one to build very large machines to model interestingly complex linguistic phenomena.  They also allow algebraic operations such as union, composition, and projection which are very useful in practice (
