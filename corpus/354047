A Better Algorithm for an Ancient Scheduling Problem
 Abstract One of the oldest and simplest variants of multiprocessor scheduling is the on-line scheduling problem studied by Graham in 1966.  This problem can also be formulated as an on-line load balancing problem, and we will use this formulation throughout this paper.  The jobs arrive online and must be immediately and irrevocably assigned to one of m identical machines without any knowledge of future jobs.  The size of a job is known on arrival.  The load of a machine is the sum of the sizes of the jobs assigned to it.  The goal of the load balancer is to minimize the maximum load on any machine.  Graham proved that the List Processing Algorithm which assigns each job to the currently least loaded machine has competitive ratio (2\Gamma 1=m).  Recently algorithms with smaller competitive ratios than List Processing have been discovered, culminating in Bartal, Fiat, Karloff, and Vohra's construction of an algorithm with competitive ratio bounded away from 2.  Their algorithm has a competitive ratio of at most (2\Gamma 1=70) 1:986 for all m; hence for m ? 70, their algorithm is provably better than List Processing.  We present the CHASM ff algorithm that outperforms List Processing for any m 6, outperforms all previously published algorithms for any m 8, and has a competitive ratio of at most 1:945 for all m, which is significantly closer to the best known lower bound of 1:837 for the problem.  We show that our analysis of CHASM ff is almost tight by presenting a lower bound of 1:9378 on CHASM ff 's competitive ratio for large m.  We also explore some of the tradeoffs between any algorithm's worst case and average case performance.  All these results assume that jobs have infinite duration.  We also consider the case where jobs arrive with finite, unknown duration, and we show that List Processing is the optimal on-line algorithm in this setting with a competitive ratio of 2 \Gamma 1 m .
