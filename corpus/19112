A GENERALIZED CONSTRUCTION OF INTEGRATED SPEECH RECOGNITION TRANSDUCERS
 ABSTRACT We showed in previous work that weighted finite-state transducers provide a common representation for many components of a speech recognition system and described general algorithms for combining these representations to build a single optimized and compact transducer integrating all these components, directly mapping from HMM states to words.  This approach works well for certain well-controlled input transducers, but presents some problems related to the efficiency of composition and the applicability of determinization and weight-pushing with more general transducers.  We generalize our prior construction of the integrated speech recognition transducer to work with an arbitrary number of component transducers and, to a large extent, release the constraints imposed to the type of input transducers by providing more general solutions to these problems.  This generalization allowed us to deal with cases where our prior optimization did not apply.  Our experiments in the AT&T HMIHY 0300 task and an AT&T VoiceTone task show the efficiency of our generalized optimization technique.  We report a 1. 6 recognition speed-up in the HMIHY 0300 task, 1. 8 speed-up in a VoiceTone task using a word-based language model, and 1. 7 using a class-based model.  1.  MOTIVATION In previous work, we showed that weighted finite-state transducers provide a common and natural representation for many components of a speech recognition system, e. g. , HMMs, contextdependency, pronunciation dictionaries, and language models [8].  We also described general algorithms for combining these representations flexibly and efficiently and showed that they can be used to build a single optimized transducer that integrates these components, directly mapping from HMM states to words [9, 10].  In this method, weighted transducer composition is used to combine the component transducers, while determinization, minimization and weight-pushing optimize the result in time and space.  The resultant transducer has a standardized representation, unique up to state renumbering.  This approach works well for certain well-controlled input transducers, but presents some problems with more general transducers.  These problems are related to composition, determinization, and weight-pushing.  Composition can use unacceptable amounts of time and space when there are significant delays in matching due to #-transitions.  In simple cases, this can be avoided by a careful construction of the component transducers.  In practice, inexperienced users are often not fully aware of this.  For example, they may place the output labels in the lexicon transducer L at the ends of words rather than at the beginning, which can significantly slow down composition.  For more complex transducers, trying to manually place the input and output labels for the best effect becomes difficult.  Not all transducers are determinizable.  The lexicon transducer, for example, is not determinizable if it contains homophones.  In our prior construction, we added disambiguation symbols at word ends as needed to solve this problem.  For more general transducer inputs, this is insufficient.  A related problem is that # This author's new address is:
