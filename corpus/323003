2D DNA Self-Assembly for Satisfiability
 Abstract DNA self-assembly has been proposed as a way to cope with huge combinatorial NP-HARD problems, such as satisfiability.  However, the algorithmic designs for DNA self-assembly proposed so far are highly dependent on the instance to be solved.  The required work (DNA synthesis, tile construction, encoding, etc. ) can be done only after the instance is given.  This paper presents an algorithmic design for solving satisfiability problems using two-dimensional DNA self-assembly (tiling).  The main driving factor in this work was the design and encoding of the algorithm in a general way that minimizes the dependency on particular instances.  In effect, a large amount of work and preparation can be done in advance as a batch process in the absence of any particular instance.  In practice, it is likely that the total time (from the time an instance is given, to the time a solution is returned) will be decreased significantly and laboratory procedures will be simplified.  1 The Satisfiability (SAT) Problem The Boolean Satisfiability (SAT) problem is the most known representative of the NP-HARD class of problems.  The non-polynomial (usually exponential) time required for optimal solutions to these problems, implies that solution of large instances becomes intractably difficult, if not practically impossible.  A SAT instance consists of a number of Boolean variables x 1 ;x 2 ; :::; xm and a number of clauses C 1 ;C 2 ; :::; C n .  Each clause is a disjunction of distinct literals, whereby a literal is a single variable x i itself or its complement # x i .  A solution (satisfying assignment) is an assignment of binary values to the variables x i , such that the conjunction of all clauses is satisfied.  Boolean formulas represented in this format are said to be in Conjunction Normal Form (CNF); a conjunction of disjunctions.  An example with 5 variables and 8 clauses is given below: (x 1 + x 2 +fix 3 )(fix 2 + x 4 )(fix 1 +fix 5 )(fix 1 + x 2 + x 3 +fix 4+x 5 )(fix 3 )(x 2 + x 5 )(fix 5 )(x 1 ) In this case, the assignment(x 1 ;x 2 ;x 3 ;x 4 ;x 5 )=(1;1;0;1;0) is satisfying.  So far, there is no restriction on the number of literals that a single clause can contain.  However, even if we require that each clause has exactly k literals (k # 3), the problem (known as kCNF-SAT) is still intractable.  Moreover, it is proven that anySAT instance can be turned into an equivalent kCNFSAT instance [GaJo79].  From these variations, most notable is the 3CNF-SAT variation, because of the small-sized clauses.  Notice that for a given number of m variables, there can be # m k # # 2 k possible clauses in a kCNF-SAT formula (choose k variables and for each one either leave intact or negate).  In particular, for k = 3, there are # m 3 # # 2 3 = 4 3 #m(m , 1)(m , 2) = O(m 3 ) possible clauses in a 3CNF-SAT formula.  2 DNA Computation and Satisfiability The basic idea is to exploit the massive parallelism present in DNA operations in order to emulate a non-deterministic device that solves the SAT problem in polynomial time.  Consider a particular assignment to the boolean variables in the formula.  On a conventional computer it is fairly easy to check whether this particular assignment is a solution to the problem, i. e.  an assignment that satisfies all the clauses in the formula.  In fact, this can be done in time linear to the size of the formula.  It is the huge (exponential) number of different assignments that makes the problem difficult.  This work proposes a way to perform this checking procedure on molecular substrate using 2D DNA self-assembly.  By creating billions of copies of the participating DNA structures (tiles, in our case), we expect that this procedure will run in parallel on all possible assignments.  The assignments will be created dynamically as part of the assembly.  In effect, that will make the computation time linear to the size of the formula, while pushing the exponential dimension of the problem into the large number of DNA assemblies, and thus into the space (volume) occupied by the DNA molecules.  If there is a satisfying assignment, we expect that at least one of these parallel checks will discover it.  This section reviews the main proposals for biomolecular solutions to the SAT problem, briefly describes the general DNA structures and methods that are used here and delineates our work.  2. 1 Related Work Lipton was the first to propose a DNA model for satisfiability.  His proposal [Lipt95] is based on Adleman's elimination method, whereby the whole combinatorial space of solutions is created and subsequently the \good" ones are extracted by a series of separation steps.  Later, Hagiya et al.  [Hagi97] presented an approachtoevaluate and learn #-formulas (a particular form of Boolean formulas) using a technique that is commonly known as Whiplash PCR.  This method was improved by Winfree [Winf98].  Finally, a proposal for CNF-SAT using hairpin DNA tiles and linear assembly can be found in [WiER98].  A common feature of these approaches and a potential practical problem is that construction of the participating DNA structures cannot really begin until the particular problem instance at hand is given.  This \instance-speci#c" design implies large total computation time (encoding/DNA computation/decoding).  In addition, all required man/machine resources need to be employed again and again as new instances are provided.  Moreover, the speci#cityofthe encoding step will increase the likelihood of encoding errors, which if occur will render the whole computation useless.  A possible solution to these problems, would be an algorithmic design that requires minimal encoding for a given instance (some straightforward description of the input), whereas the main algorithm is coded in preconstructed \instance-independent" DNA molecules that can be created and even tested off-line in a batch fashion.  The DNA self-assembly technique we are going to use is known as DNA tiling computation and was proposed by Eric Winfree [Winf98].  Basic components for DNA tiling have been prototyped and tested by Nadrian Seeman and his colleagues.  In particular, double crossover molecules have been shown to be rigid and able to form planar lattices [WLWS98].  Winfree showed how to solve the Hamiltonian Path problem using 2-dimensional DNA tiling [Winf98].  Further, LaBean, Winfree and Reif [LaWR99] have been experimenting with parallel XOR and addition operations using DNA tiling.
