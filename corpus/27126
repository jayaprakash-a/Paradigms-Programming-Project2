Dynamic Sharing and Backward Compatibility on 64-Bit Machines
 Abstract As an alternative to communication via messages or files, shared memory has the potential to be simpler, faster, and less wasteful of space.  Unfortunately, the mechanisms available for sharing in most multi-user operating systems are difficult to use.  As a result, shared memory tends to appear primarily in self-contained parallel applications, where library or compiler support can take care of the messy details.  We see a tremendous opportunity to extend the advantages of sharing across application boundaries.  We believe that these advantages can be realized without introducing major changes to the Unix programming model.  In particular, we believe that it is both possible and desirable to incorporate shared memory segments into the hierarchical file system name space.  Our approach has two components: First, we use dynamic linking to allow programs to access shared data and code in the same way they access ordinary (private) variables and functions.  Second, we unify memory and files into a single-level store that facilitates the sharing of pointers.  This second component is made feasible by the 64-bit addresses of emerging microprocessors.
