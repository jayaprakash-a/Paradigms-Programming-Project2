Software Reuse by Model Reification
 Abstract This paper builds upon earlier work on systematically calculating implementations from model-oriented specifications based on abstract data types.  The calculation process is called reification and is usually done by "hand", requiring some ingenuity and time.  The adoption of model-oriented software specification encompasses the ability to classify and compare data structures.  The reification of such data models (specifications of software data structures) also provides a powerful reuse mechanism up to isomorphic and inequational refinements.  Following the underlying formal calculus (Sets), one can easily demonstrate that, for instance, a certain C++ class can be implemented by the composition of already available ones.  Our aim is to develop an automatic "reificator", based on term-rewriting theory, which is intended to take the specification of a data structure, written in the Sets notation, and to refine it until a collection of reusable data models are identified.  We also refer that genetic algorithms have the potential to support inequational termrewriting, such as is required in animating the Sets calculus.  This topic is briefly presented.
