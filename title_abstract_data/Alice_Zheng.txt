Fast Multiple Antenna Differential Decoding| Abstract We present an algorithm based on lattice reduction for the fast decoding of diagonal differential modulation across multiple antenna.  While the complexity of the maximum likelihood algorithm is exponential both in the number of antenna and the rate, the complexity of our approximate lattice algorithm is polynomial in the number of antennas and the rate.  We show that the error performance of our lattice algorithm is very close to the maximum likelihood algorithm. 
Distributed Program Sampling| ABSTRACT We propose a sampling infrastructure for gathering information about software from the set of runs experienced by its user community.  We show how to gather random samples with very low overhead for users, and we also show how to make use of the information we gather.  We present two example applications: sharing the overhead of assertions, and using statistical analysis of a large number of sampled runs to help isolate the location of a bug. 
Failure Diagnosis Using Decision Trees| Abstract We present a decision tree learning approach to diagnosing failures in large Internet sites.  We record runtime properties of each request and apply automated machine learning and data mining techniques to identify the causes of failures.  We train decision trees on the request traces from time periods in which user-visible failures are present.  Paths through the tree are ranked according to their degree of correlation with failure, and nodes are merged according to the observed partial order of system components.  We evaluate this approach using actual failures from eBay, and find that, among hundreds of potential causes, the algorithm successfully identifies 13 out of 14 true causes of failure, along with 2 false positives.  We discuss some results in applying simplified decision trees on eBay's production site for several months.  In addition, we give a cost-benefit analysis of manual vs.  automated diagnosis systems.  Our contributions include the statistical learning approach, the adaptation of decision trees to the context of failure diagnosis, and the deployment and evaluation of our tools on a high-volume production service. 
Stable Algorithms for Link Analysis| ABSTRACT The Kleinberg HITS and the Google PageRank algorithms are eigenvector methods for identifying "authoritative" or "influential" articles, given hyperlink or citation information.  That such algorithms should give reliable or consistent answers is surely a desideratum, and in [10], we analyzed when they can be expected to give stable rankings under small perturbations to the linkage patterns.  In this paper, we extend the analysis and show how it gives insight into ways of designing stable link analysis methods.  This in turn motivates two new algorithms, whose performance we study empirically using citation data and web hyperlink data. 
Link Analysis, Eigenvectors and Stability| Abstract The HITS and the PageRank algorithms are eigenvector methods for identifying "authoritative" or "influential" articles, given hyperlink or citation information.  That such algorithms should give consistent answers is surely a desideratum, and in this paper, we address the question of when they can be expected to give stable rankings under small perturbations to the hyperlink patterns.  Using tools from matrix perturbation theory and Markov chain theory, we provide conditions under which these methods are stable, and give specific examples of instability when these conditions are violated.  We also briefly describe a modification to HITS that improves its stability. 
Bug isolation via remote program sampling| ABSTRACT We propose a low-overhead sampling infrastructure for gathering information from the executions experienced by a program's user community.  Several example applications illustrate ways to use sampled instrumentation to isolate bugs.  Assertion-dense code can be transformed to share the cost of assertions among many users.  Lacking assertions, broad guesses can be made about predicates that predict program errors and a process of elimination used to whittle these down to the true bug.  Finally, even for non-deterministic bugs such as memory corruption, statistical modeling based on logistic regression allows us to identify program behaviors that are strongly correlated with failure and are therefore likely places to look for the error. 
Statistical Debugging of Sampled Programs| Abstract We present a novel strategy for automatically debugging programs given sampled data from thousands of actual user runs.  Our goal is to pinpoint those features that are most correlated with crashes.  This is accomplished by maximizing an appropriately defined utility function.  It has analogies with intuitive debugging heuristics, and, as we demonstrate, is able to deal with various types of bugs that occur in real programs. 
Scalable Statistical Bug Isolation| Abstract We present a statistical debugging algorithm that isolates bugs in programs containing multiple undiagnosed bugs.  Earlier statistical algorithms that focus solely on identifying predictors that correlate with program failure perform poorly when there are multiple bugs.  Our new technique separates the effects of different bugs and identifies predictors that are associated with individual bugs.  These predictors reveal both the circumstances under which bugs occur as well as the frequencies of failure modes, making it easier to prioritize debugging efforts.  Our algorithm is validated using several case studies, including examples in which the algorithm identified previously unknown, significant crashing bugs in widely used systems. 
Deconstructing Motion| Abstract In this paper, we use the Locally Linear Embedding (LLE) algorithm to reduce the dimensionality of video sequences of human motion.  The LLE algorithm is a fast dimensionality reduction algorithm that finds local geometry in high dimensional space, and produces a projection to low dimensional space which preserves the original local geometry.  We implement both the original algorithm and its on-line variant, and demonstrate its performance on human walking motion.  Section 1 introduces the problem and the intuition behind the algorithm.  Section 2 describes the algorithm and its implementation in detail.  Section 3 presents experimental results.  Section 4 involves the on-line variant of LLE.  We conclude with suggestions for future work. 
Bug Is lati n via Rem te Pr gram Sampling,|
\Fast multiple antenna differential|
Sampling user executions for bug isolation|
"Fast multiple antenna differential decoding," tech| rep. ,. 
