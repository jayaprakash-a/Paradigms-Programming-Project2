Identification of Behaviors in an Agent's Phase Space| Abstract: This paper describes a method for analyzing the behavior of an autonomous robot.  The robot is viewed as a continuous, stochastic dynamical system.  The analysis starts from an empirical phase portrait.  In a first stage, elementary regularities are detected.  These regularities, called transient attractors, combine properties of attractors with properties of partition cells of phase space.  As the system trajectory passes through these regularities repeatedly, a sequence of identifiable events is produced, which can be interpreted as a symbol sequence.  This sequence is further analyzed in the second stage, where a finite description of temporal regularities within it is constructed.  This description comes in the format of a variety of finite-state automata.  In a third stage, higher-order regularities in this #nite-state-like description are identified.  This yields a hierarchic behavior model.  At all stages, regularities are defined using criteria of maximal local predictability.  Thus, the entire method can be seen as an information theoretic approachto bridging the gap between the non-symbolic, quantitative level of robots and higher-level symbolic models. 
A Framework for Plan Execution in Behaviour-Based Robots| This paper presents a conceptual architecture for autonomous robots that integrates behaviour-based and goal-directed action as by following a traditional action plan.  Dual Dynamics is the formalism for describing behaviourbased action.  Partial-order propositional plans, which get generated by GRAPHPLAN, are used as a basis for acting goal-directedly; the concept is suitable for using other planning methods and plan representations, though.  The paper presents the corresponding action and plan representations at the plan side and at the behaviour side.  Moreover, it describes how behaviour-based action is biased towards executing a plan and how information from the behaviour side is fed back to the plan side to determine progress in the plan execution. 
Dynamische Symbolsysteme (Dynamic Symbol Systems)| Abstract This thesis introduces dynamic symbol systems (DSS).  The approach combines a symbolic format of information with a self-organizing dynamics.  It is primarily intended for the modeling of intelligent, situated agents.  The basic information processing module is a self-organizing stream.  In computational terms, this is an anytime-algorithm for the processing of information that comes in a quite general stream format.  In terms of thermodynamic systems, it is an open, dissipative, rapidly selforganizing system.  In terms of cognitive science, a self-organizing stream is a module that can appear at any place from the peripheric sensomotoric interface to the central conceptual level, performing tasks of pattern completion, noise filtering, and gestalt formation.  Different self-organizing streams can be coupled, yielding complex, self-organizing information processing systems.  These associeties can span the entire periphery-centre axis of an agent.  Top-down and bottom-up influences mutually support each other, with none of them having causal or temporal precedence over the other.  At the most central, conceptual level, the DSS representation format is in many aspects comparable to classical semantic networks.  The approach proposes answers to several controversial issues concerning the nature of concepts, e. g. , context sensitivity, nonmonotonic inheritance, the nature of concepts vs.  attributes, and conceptual cycles.  DSS is a concrete formal instantiation of a general, structuralistic epistemology for situated information processing, namely, dynamic symbol structures.  The key assumption of this perspective is to consider symbols as empirical, physical observables, which can be reliably detected in an information processing system.  This epistemological frame yields a unified view on two paradigms that are often considered incompatible, i. e. , the physical symbol systems paradigm and situated action.  The dynamics is described in algorithmic terms.  It should be relatively straightforward to make the formalism run on a computer.  As yet, however, the approach is not implemented.  The thesis first establishes and explores the epistemological frame.  It then develops, in a rigorous fashion, the concrete DSS formalism.  An application is proposed, where DSS serves as an auxiliary mechanism for memory access in an otherwise classical system.  The DSS representation format for symbolic knowledge is compared with classical methods for concept representation.  General insights concerning the combination of a self-organizing dynamics with symbolic representation formats are derived from a comparison of DSS with related connectionist models. 
Dual Dynamics: Designing Behavior Systems for Autonomous Robots| Abstract This paper describes the "dual dynamics" (DD) formal scheme for robotic behavior control systems.  Behaviors are designed as dynamical systems which are specified in ordinary differential equations.  A key idea for the DD scheme is that a robotic agent can work in different "modes", which lead to qualitatively different behavioral patterns.  Intuitively, modes can be likened to "moods".  Mathematically, transitions between modes are bifurcations in the control system. 
A short introduction to observable operator models of discrete stochastic processes| Abstract The article describes a new formal approach to model discrete stochastic processes, called observable operator models (OOMs).  It is shown how hidden Markov models (HMMs) can be properly generalized to OOMs.  These OOMs aord both mathematical simplicity and algorithmic eciency, where HMMs exhibit neither.  The observable operator idea also leads to an abstract, information-theoretic representation of stationary, discrete stochastic processes.  It is shown how any such process can be uniquely characterized by its abstract observable operators, yielding an abstract OOM of the process.  All in all, observable operators open a lucid, general, and computationally extremely powerful avenue to discrete stochastic processes. 
Transient attractors: Re-recognizable regularities in empirical time series| Abstract: A common first step in analyzing empirical, continuous time series is to transform them into a symbol sequence.  This requires to define re-recognizable entities in the original data, which can be labelled by symbols.  Two families of classical candidates for such entities are attractors and volume cells in phase space.  They have complementary merits.  This article describes a third kind of nameable entities, transient attractors, which combine and volume cells and their respective merits.  An algorithm for the practical extraction of transient attractors from empirical data is sketched. 
The Dual Dynamics Design Scheme for Behavior-based Robots: A Tutorial| Abstract: This paper is a tutorial on a particular method for designing behavior-based robots, the dual dynamics (DD) scheme.  The DD scheme guides the specification of multilevel control architectures in a format of differential equations.  DD design is characterized by two principal properties.  First, behaviors are construed as dynamical systems, which consist of two subsystems (hence the name, "dual dynamics").  One subsystem generates the behavior's dynamics proper, the other is responsible for activating and de-activating the behavior.  The second principal property is that higher levels in the control architecture do not directly "call" lower-level behaviors to execute.  Rather, a higher-level behavior can ``configure" the entire lower level, which thereafter can operate fully on its own, without ongoing supervision by the higher level. 
Dynamic Symbol Systems: An Introduction to the Local Model| Abstract Dynamic symbol systems (DSS) are a class of dynamic systems especially developed for modeling situated agents.  They combine a symbolic format of representation with a selforganizing dynamics.  The theory can be used for theoretical purposes, as a discrete, approximative reconstruction of continuous dynamic systems.  It can also be used for the practical design of multi-granular information processing systems, since it is formulated in algorithmic terms.  Furthermore, as processing on a conceptual level is concerned, the dynamic system perspective suggests answers to some questions that are hard for logic-oriented approaches.  All in all, DSS contributes to bridging the gap between dynamics-oriented, bottom-up techniques, and representation-oriented, top-down perspectives in AI.  The paper gives an informal introduction to the part of DSS theory concerned with local phenomena, while the global part of the theory is very briefly sketched.  October 1994 draft version submitted to AISB-95
Discrete-time, discrete-valued observable operator models: a tutorial| Abstract This tutorial gives a basic yet rigorous introduction to observable operator models (OOMs).  OOMs are a recently discovered class of models of stochastic processes.  They are mathematically simple in that they require only concepts from elementary linear algebra.  The linear algebra nature gives rise to an ecient, consistent, unbiased, constructive learning procedure for estimating models from empirical data.  The tutorial describes in detail the mathematical foundations and the practical use of OOMs for identifying and predicting discrete-time, discrete-valued processes, both for output-only and input-output systems. 
Brains on wheels: Mobile robots for brain research| Abstract: Two mysteries of brains are focussed in this article from a roboticist's view.  The first is the brain's capacity to make sense of real-life sensoric input, which differs strongly from experimentally administered stimuli.  Another riddle posed by biological brains lies in the fact that brain subsystems are functionally indeterminate when seen in isolation, and acquire different functions when they interact with different other subsystems and receive different sensor input ("multi-functionality").  The paper describes insights gained in designing robots which directly relate to these two fundamental questions.  Experiences with a "behavior-based" robot, the Black Knight (BK), are reported in some detail.  BK had to work in an environment which was so messy that a formal modeling of the sensoric stimuli expected for the robot was out of the question.  BK's control program makes do without explicit representations of external circumstances, and relies on "acting things out" instead.  This leads to a deeper understanding of the real-life input problem.  With respect to the multi-functionality problem, BK offers surprising insights since it is construed and programmed as a dynamical system comprised of many open subsystems ("behaviors").  Open dynamical systems intrinsically are functionally indeterminate.  While the reported methodology and results are of some interest for their own sake, the superordinate goal of this paper is to promote robot experiments as a tool for brain research. 
Adaptive Nonlinear System Identification with Echo State Networks| Abstract Echo state networks (ESN) are a novel approach to recurrent neural network training.  An ESN consists of a large, fixed, recurrent \reservoir" network, from which the desired output is obtained by training suitable output connection weights.  Determination of optimal output weights becomes a linear, uniquely solvable task of MSE minimization.  This article reviews the basic ideas and describes an online adaptation scheme based on the RLS algorithm known from adaptive linear systems.  As an example, a 10-th order NARMA system is adaptively identified.  The known benefits of the RLS algorithms carry over from linear systems to nonlinear ones; specifically, the convergence rate and misadjustment can be determined at design time. 
Behavior Engineering with "Dual Dynamics" Models and Design Tools| Abstract Dual Dynamics (DD) is a mathematical model of a behavior control system for mobile autonomous robots.  Behaviors are specified through dierential equations, forming a global dynamical system made of behavior subsystems which interact in a number of ways.  DD models can be directly compiled into executable code.  The article (i) explains the model, (ii) sketches the Dual Dynamics Designer (DDD) environment that we use for the design, simulation, implementation and documentation, and (iii) illustrates our approach with the example of kicking a moving ball into a goal. 
Dual dynamics: Designing behaviour systems for autonomous robots to appear in the proc|
An Introduction to Dynamic Concept Systems|
The Dual Dynamics Design Scheme for Behavior-based Robots: A Tutorial Arbeitspapiere der GMD 966,|
Steilkurs Dynamische Systeme|
Learning to Ground Fact Symbols in Behavior-Based Robots|
Schll: Robot Behavior Design Using Dual Dynamics,|
